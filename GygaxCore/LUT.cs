using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Emgu.CV;
using Emgu.CV.CvEnum;
using Emgu.CV.Structure;
using SharpDX;

namespace GygaxCore
{
    public static class LUT
    {
        public static int[,] Colors =
        {
            {   0,   0,   0 }, //0
            { 182, 187, 145 }, //1
            { 102, 216, 181 }, //2
            { 250, 131, 254 }, //3
            { 119, 230,  31 }, //4
            { 212, 184,   5 }, //5
            { 130,  93, 214 }, //6
            {  40, 168, 208 }, //7
            { 193, 186, 170 }, //8
            { 238,  82, 206 }, //9
            {  25,  46,  56 }, //10
            { 190,  12, 134 }, //11
            { 135, 149, 151 }, //12
            {  55, 190,   8 }, //13
            { 153, 201, 191 }, //14
            { 119, 207, 218 }, //15
            {  44, 156, 119 }, //16
            {  17, 105, 222 }, //17
            { 201,  39, 228 }, //18
            { 207, 243,   0 }, //19
            { 229, 118, 134 }, //20
            { 229, 224,  85 }, //21
            { 198, 184, 218 }, //22
            { 152,  77,  34 }, //23
            { 109,  74, 158 }, //24
            { 205, 142, 222 }, //25
            {  17,  73, 234 }, //26
            { 206, 194, 180 }, //27
            {  86,   7, 196 }, //28
            {  88, 243, 227 }, //29
            { 161, 182, 160 }, //30
            { 150,  81,  72 }, //31
            { 129, 178, 231 }, //32
            { 105, 176,  22 }, //33
            {   0, 147,  79 }, //34
            {  84, 163,  31 }, //35
            {  63, 250, 152 }, //36
            {   5, 190, 170 }, //37
            {  21,  23, 179 }, //38
            { 208, 143, 216 }, //39
            { 144, 109, 195 }, //40
            { 246, 246, 149 }, //41
            { 129, 213, 247 }, //42
            {  85,  76, 218 }, //43
            { 246, 166, 152 }, //44
            { 211, 206,  46 }, //45
            { 101,   2,  99 }, //46
            { 165,  25, 247 }, //47
            {  75, 155, 247 }, //48
            { 245, 129,  58 }, //49
            { 148, 176,  35 }, //50
            {  15, 216,  66 }, //51
            {  82,   8, 156 }, //52
            { 184, 210, 204 }, //53
            {  38, 233, 174 }, //54
            { 189,  14,  23 }, //55
            {  17,  64,  71 }, //56
            { 132, 107, 140 }, //57
            { 117, 233,  84 }, //58
            { 203, 170,  90 }, //59
            { 157, 138,  84 }, //60
            { 189, 192, 155 }, //61
            { 182, 231, 204 }, //62
            {  85, 129, 197 }, //63
            { 145, 171,  46 }, //64
            { 149, 126,  46 }, //65
            {  73, 141, 141 }, //66
            { 223, 227,  64 }, //67
            { 241,  16,  68 }, //68
            { 149, 152, 237 }, //69
            { 237, 134,  92 }, //70
            {  65,  27,  71 }, //71
            { 120, 103,  40 }, //72
            {  19,   6,  37 }, //73
            {  73, 187, 189 }, //74
            { 129, 241, 190 }, //75
            {  94, 223, 107 }, //76
            {  37, 129,  29 }, //77
            { 203, 188, 166 }, //78
            {  20, 203, 176 }, //79
            {  86,  33,  78 }, //80
            { 222, 103, 250 }, //81
            { 104,  79, 144 }, //82
            { 230,  29,  23 }, //83
            {   6,  53, 134 }, //84
            { 104, 150,  40 }, //85
            { 130, 112,  30 }, //86
            { 133,  55, 184 }, //87
            { 130, 199,   4 }, //88
            {  63, 117,  93 }, //89
            { 160,  99, 154 }, //90
            { 119, 187, 228 }, //91
            { 214, 106,  83 }, //92
            { 193,  24, 161 }, //93
            {  45, 119, 193 }, //94
            {  83,  31,  76 }, //95
            { 149,  99,  38 }, //96
            { 125, 144,  91 }, //97
            { 146, 208, 232 }, //98
            { 149,  91, 159 }, //99
            { 246,  41, 217 }, //100
            {  50,  69, 184 }, //101
            { 123, 142, 120 }, //102
            { 161, 144,  43 }, //103
            { 212, 191,  87 }, //104
            { 123,  87, 191 }, //105
            { 245,  46, 168 }, //106
            { 183, 168,  18 }, //107
            {  55,  34, 210 }, //108
            {  63, 227, 234 }, //109
            { 250,  65,  14 }, //110
            { 178, 202, 238 }, //111
            { 199, 249,  49 }, //112
            {   9, 215, 144 }, //113
            { 210, 243, 209 }, //114
            { 249, 168, 208 }, //115
            {   3,  22, 120 }, //116
            {  41, 158,  44 }, //117
            { 246,  63, 127 }, //118
            { 198, 250,  34 }, //119
            { 229,  59, 169 }, //120
            { 141, 166,  79 }, //121
            {  28,  33, 243 }, //122
            { 104, 179,  92 }, //123
            { 141, 235,  86 }, //124
            {  24, 228, 180 }, //125
            {  64,  61, 121 }, //126
            {   1,  60, 205 }, //127
            { 113, 209, 161 }, //128
            { 225, 187, 139 }, //129
            { 110,   0, 254 }, //130
            {  14,  35, 155 }, //131
            { 229,  68,  77 }, //132
            { 129, 220, 135 }, //133
            { 219, 153,  97 }, //134
            {  28, 154, 177 }, //135
            { 212, 222,  89 }, //136
            { 202, 134, 189 }, //137
            { 168, 227, 254 }, //138
            { 218,  27, 211 }, //139
            { 173,  58, 100 }, //140
            { 104, 249, 179 }, //141
            {  92, 126, 200 }, //142
            { 186,  49, 159 }, //143
            { 103, 190,  95 }, //144
            { 240,  36, 161 }, //145
            { 107,  85,  54 }, //146
            { 238,  12, 220 }, //147
            {  49, 162, 121 }, //148
            {  65, 101,  62 }, //149
            { 155,  11,  41 }, //150
            { 120, 210, 161 }, //151
            {  34, 115, 158 }, //152
            { 173, 190,  27 }, //153
            { 232,  26, 172 }, //154
            { 185,  99, 199 }, //155
            {  93, 183, 190 }, //156
            {  92, 110, 196 }, //157
            { 157, 189,  46 }, //158
            { 135,  54,  87 }, //159
            {  58,  27,  25 }, //160
            { 137,  31,  37 }, //161
            { 117, 237, 234 }, //162
            { 188, 206, 176 }, //163
            {   3, 189, 149 }, //164
            {  26,   6, 240 }, //165
            {  47, 118,  63 }, //166
            { 177, 227, 173 }, //167
            { 126,  62, 155 }, //168
            {  99, 218,  21 }, //169
            { 115, 154,  60 }, //170
            {  71, 115, 163 }, //171
            {   1,  94, 250 }, //172
            { 135,  68, 116 }, //173
            { 220, 159, 231 }, //174
            {  14,  89, 175 }, //175
            {  47, 130, 182 }, //176
            {  60,  87, 191 }, //177
            {  24, 136,  54 }, //178
            { 107,  11, 223 }, //179
            { 136,  17,  19 }, //180
            { 212,  73,  51 }, //181
            { 116, 186,  74 }, //182
            { 241,  25, 167 }, //183
            { 245, 167,  50 }, //184
            { 201, 212,  67 }, //185
            { 196, 112, 227 }, //186
            { 234,  52,  87 }, //187
            {  93,  54,  66 }, //188
            { 124,  47, 234 }, //189
            { 108, 149,  82 }, //190
            {  26, 253,  50 }, //191
            {  96,   7,  86 }, //192
            { 179, 153, 158 }, //193
            { 101,  60, 105 }, //194
            {  14,  70, 175 }, //195
            { 140,  77, 178 }, //196
            { 241, 166, 153 }, //197
            { 250, 157, 220 }, //198
            { 186, 118,  18 }, //199
            { 240, 247, 138 }, //200
            {  95, 132, 130 }, //201
            {  85, 218, 169 }, //202
            {   0, 104, 204 }, //203
            { 236,  16, 214 }, //204
            {  68, 133, 246 }, //205
            { 237,  79, 239 }, //206
            { 146, 238, 225 }, //207
            {  55, 121, 237 }, //208
            { 183,  30,  96 }, //209
            {  84, 165, 143 }, //210
            {  67, 194, 160 }, //211
            {  19,   5, 183 }, //212
            { 229, 184, 106 }, //213
            {   5, 140, 227 }, //214
            { 229,   5, 150 }, //215
            { 194, 181,  23 }, //216
            { 228, 204,  39 }, //217
            {  33,  93,   8 }, //218
            { 168,  40,  10 }, //219
            { 148, 156, 187 }, //220
            {  73, 170, 194 }, //221
            {  61, 168,  76 }, //222
            {  53,  49, 127 }, //223
            {  63,   8, 149 }, //224
            { 132, 141,  98 }, //225
            { 252,  80, 116 }, //226
            {  87, 244, 103 }, //227
            {  72, 110, 216 }, //228
            { 103,  33, 101 }, //229
            { 152, 106, 220 }, //230
            { 172,  80,  28 }, //231
            { 174, 187, 224 }, //232
            {  33, 168,  91 }, //233
            {  74, 140, 132 }, //234
            { 150, 165, 195 }, //235
            { 145, 156, 207 }, //236
            { 165, 171, 214 }, //237
            { 149,  61, 166 }, //238
            {  83,   0,  59 }, //239
            { 233, 212, 135 }, //240
            { 229, 156, 198 }, //241
            { 162, 145, 182 }, //242
            { 120, 213, 208 }, //243
            { 129, 218, 167 }, //244
            {  25,  12, 103 }, //245
            { 226, 176, 200 }, //246
            {  20, 213, 132 }, //247
            { 149, 242, 189 }, //248
            {   5,  23,  19 }, //249
            { 117,  90, 186 }, //250
            { 164,  54, 211 }, //251
            { 211,  99, 239 }, //252
            { 189, 243,  20 }, //253
            {  13,  24, 197 }, //254
            { 253,  36, 207 }, //255
        };

        public static void ApplyLut(ref double[,] source, out Emgu.CV.Image<Bgr, Byte> destination)
        {
            destination = new Image<Bgr, Byte>(source.GetLength(0), source.GetLength(1));


            for (int y = 0; y< source.GetLength(1); y++)
            {
                for (int x = 0; x< source.GetLength(0); x++)
                {
                    var cId = Convert.ToInt32(source[y, x]);
                    destination[y, x] = new Bgr(Colors[cId, 0], Colors[cId, 1], Colors[cId, 2]);
                }

            }
        }

        private static Random rand = new Random((int)DateTime.Now.Ticks);

        public static Color GetRandomColor()
        {
            int i = rand.Next(0, 255);
            return new Color(
                Colors[i,0],
                Colors[i,1],
                Colors[i,2],
                255
                );
        }

        public static void ApplyColormap(ref double[,] source, out Emgu.CV.Image<Bgr, Byte> destination, ColorMapType colorMapType)
        {
            double max = 0;

            for (int y = 0; y < source.GetLength(1); y++)
            {
                for (int x = 0; x < source.GetLength(0); x++)
                {
                    if (source[y, x] > max)
                    {
                        max = source[y, x];
                    }
                }
            }

            Image<Gray, byte> buffer = new Image<Gray, Byte>(source.GetLength(0), source.GetLength(1));

            for (int y = 0; y < source.GetLength(1); y++)
            {
                for (int x = 0; x < source.GetLength(0); x++)
                {
                    buffer[y, x] = new Gray(source[y, x] * 255 / max);
                }
            }

            destination = new Image<Bgr, Byte>(source.GetLength(0), source.GetLength(1));
            CvInvoke.ApplyColorMap(buffer, destination, colorMapType);
        }

        public static void ApplyColormap(ref Emgu.CV.Image<Gray, double> source, out Emgu.CV.Image<Bgr, Byte> destination, ColorMapType colorMapType, bool invert = false)
        {
            destination = new Image<Bgr, Byte>(source.Width, source.Height);

            var max = 0.0;

            for (int y = 0; y < source.Height; y++)
            {
                for (int x = 0; x < source.Width; x++)
                {
                    if (source[y, x].Intensity > max)
                    {
                        max = source[y, x].Intensity;
                    }
                }
            }

            Image<Gray, byte> bufferImage = new Image<Gray, Byte>(source.Width, source.Height);
            
            for (int y = 0; y < source.Height; y++)
            {
                for (int x = 0; x < source.Width; x++)
                {
                    if (invert)
                    {
                        bufferImage[y, x] = new Gray(255 - source[y, x].Intensity * 255 / max);
                    }
                    else
                    {
                        bufferImage[y, x] = new Gray(source[y, x].Intensity * 255 / max);
                    }
                }
            }

            CvInvoke.ApplyColorMap(bufferImage, destination, colorMapType);
        }


        /// Old code for generating random LUT

        //Image<Bgr, Byte> lut = new Image<Bgr, Byte>( 256,256);

        //Image<Bgr, Byte> lut = new Image<Bgr, Byte>(@"C:\Users\Philipp\Desktop\lut.bmp");

        //string[] lines = new string[256];

        //for (int i = 0; i < 256; i++)
        //{
        //    lines[i] = "{ " + lut[0, i].Blue + ", " + lut[0, i].Green + ", " + lut[0, i].Red + " }, //" + i;
        //}
        //System.IO.File.WriteAllLines(@"C:\Users\Philipp\Desktop\lut.txt", lines);



        //Random rnd = new Random();

        //for (int i = 1; i < 256; i++)
        //{
        //    //lut[0,i] = new Bgr(rnd.Next(0, 255), rnd.Next(0, 255), rnd.Next(0, 255));
        //    CvInvoke.Line(lut, new Point(i,0), new Point(i, 255), new MCvScalar(rnd.Next(0, 255), rnd.Next(0, 255), rnd.Next(0, 255)));
        //}



        //lut.Save(@"C:\Users\Philipp\Desktop\lut.bmp");
    }
}
